# /docker-compose.yml (Definitive, Relaxed Startup Version)

services:
  nginx:
    image: nginx:latest
    container_name: corpus_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - web

  web:
    build: ./server
    container_name: corpus_web_app
    env_file: .env
    volumes:
      - ./server:/app
    # --- THIS IS THE KEY CHANGE ---
    # We no longer wait for a 'service_healthy' condition.
    # Instead, we just wait for the services to exist.
    depends_on:
      - db
      - tika
      - chroma
      - ollama
    # The CMD is modified to wait 15 seconds before starting,
    # giving the other services time to initialize.
    command: >
      sh -c "echo 'Waiting for other services to initialize...' && 
             sleep 15 && 
             echo 'Starting application...' && 
             flask init-db && 
             gunicorn --bind 0.0.0.0:5000 --workers 2 --timeout 120 app:app"

  tika:
    image: apache/tika:latest-full
    container_name: corpus_tika
    ports:
      - "9998:9998"
    # We remove the healthcheck to prevent the 'unhealthy' error state.
    # The web app's sleep command handles the startup delay.

  db:
    image: postgres:15
    container_name: corpus_db
    env_file: .env
    volumes:
      - corpus_data:/var/lib/postgresql/data
    healthcheck:
      # We keep the DB healthcheck as it's very reliable.
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  chroma:
    image: chromadb/chroma
    container_name: corpus_chroma
    ports:
      - "8000:8000"
    volumes:
      - chroma_data:/chroma/.chroma/index
    environment:
      - ANONYMIZED_TELEMETRY=False
      - IS_PERSISTENT=TRUE

  ollama:
    image: ollama/ollama
    container_name: corpus_ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama

  # The model puller is unchanged.
  ollama-model-puller:
    image: curlimages/curl:latest
    container_name: corpus_model_puller
    command: >
      /bin/sh -c "
      echo 'Waiting for Ollama...';
      until curl -s -f http://ollama:11434/ > /dev/null; do
        sleep 2;
      done;
      echo 'Pulling model...';
      curl http://ollama:11434/api/pull -d '{ \"name\": \"tinyllama\" }';
      echo 'Model pull complete.';
      "
    depends_on:
      - ollama

volumes:
  corpus_data:
  chroma_data:
  ollama_data: