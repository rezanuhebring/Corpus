# /docker-compose.yml (Definitive, Final Version)
services:
  nginx:
    image: nginx:latest
    container_name: corpus_nginx
    ports: ["80:80"]
    # FIX: This line loads our configuration file into Nginx.
    volumes: ["./nginx.conf:/etc/nginx/conf.d/default.conf:ro"]
    depends_on: [web]

  web:
    build: ./server
    container_name: corpus_web_app
    env_file: .env
    volumes: ["./server:/app", "corpus_uploads:/app/uploads"]
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    command: >
      sh -c "flask init-db && 
             gunicorn --bind 0.0.0.0:5000 --workers 2 --timeout 120 'app:create_app()'"

  worker:
    build: ./server
    container_name: corpus_worker
    env_file: .env
    volumes: ["./server:/app", "corpus_uploads:/app/uploads"]
    # FIX: Replaced 'sleep' with proper health checks for robust startup.
    depends_on:
      redis: { condition: service_healthy }
      db: { condition: service_healthy }
      tika: { condition: service_healthy }
      chroma: { condition: service_healthy }
      ollama: { condition: service_healthy }
    command: celery -A app.celery worker --loglevel=info

  redis:
    image: redis:7-alpine
    container_name: corpus_redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  tika:
    image: apache/tika:latest-full
    container_name: corpus_tika
    healthcheck:
      # Added a healthcheck for Tika for more reliable worker startup
      test: ["CMD", "curl", "-f", "http://localhost:9998/tika"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s

  db:
    image: postgres:15
    container_name: corpus_db
    env_file: .env
    volumes: ["corpus_data:/var/lib/postgresql/data"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  chroma:
    image: chromadb/chroma:0.4.24
    container_name: corpus_chroma
    volumes: ["chroma_data:/chroma"]
    # FIX: The definitive command to fix permissions and run the server.
    command: >
      sh -c "
      chown -R chroma:chroma /chroma &&
      exec su -s /bin/sh -c '/bin/chroma run --host 0.0.0.0 --port 8000 --path /chroma' chroma
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  ollama:
    image: ollama/ollama
    container_name: corpus_ollama
    volumes: ["ollama_data:/root/.ollama"]
    healthcheck:
      # Added a healthcheck for Ollama
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  ollama-model-puller:
    image: curlimages/curl:latest
    container_name: corpus_model_puller
    command: >
      /bin/sh -c "
      echo 'Waiting for Ollama...';
      until curl -s -f http://ollama:11434/ > /dev/null; do
        sleep 2;
      done;
      echo 'Pulling tinyllama model...';
      curl http://ollama:11434/api/pull -d '{ \"name\": \"tinyllama\" }';
      echo 'Model pull complete.';
      "
    depends_on:
      - ollama

volumes:
  corpus_data: {}
  chroma_data: {}
  ollama_data: {}
  corpus_uploads: {}